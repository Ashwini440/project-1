pipeline {
    agent any
     triggers {
        githubPush()
    }
    environment {
        MAVEN_HOME = "/opt/apache-maven-3.9.9"
        PATH = "$PATH:$MAVEN_HOME/bin"
        AWS_REGION = "us-east-1"
        ECR_REPO = "881490092139.dkr.ecr.us-east-1.amazonaws.com/project-1"
        TAG = "latest"
        KUBECONFIG = "kube-config-content"
    }
    stages {
        stage('Git Checkout') {
            steps {
                git credentialsId: 'github-username', url: 'https://github.com/Ashwini440/project-1.git'
            }
        }
        
        stage('Maven Build') {
            steps {
                sh 'mvn package'
            }
        }

        stage('Docker Image Build') {
            steps {
                sh 'docker build -t project-1:latest .'
            }
        }

        stage('Login to ECR') {
            steps {
                withCredentials([
                    [$class: 'AmazonWebServicesCredentialsBinding', 
                     credentialsId: 'aws', 
                     accessKeyVariable: 'AWS_ACCESS_KEY_ID', 
                     secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']
                ]) {
                    sh '''
                        # Authenticate Docker to ECR
                        aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPO
                    '''
                }
            }
        }

        stage('Push Image to ECR') {
            steps {
                sh '''
                    docker tag project-1:latest $ECR_REPO:latest
                    docker push $ECR_REPO:latest
                '''
            }
        }

        stage('Deploy to EKS') {
            steps {
                withCredentials([
                    file(credentialsId: 'kube-config-content', variable: 'KUBECONFIG'),
                    [$class: 'AmazonWebServicesCredentialsBinding', 
                     credentialsId: 'aws', 
                     accessKeyVariable: 'AWS_ACCESS_KEY_ID', 
                     secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']
                ]) {
                    sh '''
                        kubectl apply -f Deployment.yml --kubeconfig=$KUBECONFIG --validate=false
                    '''
                }
            }
        }
    }
}

